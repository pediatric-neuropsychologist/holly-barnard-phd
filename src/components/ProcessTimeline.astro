---
export interface Step {
  number: number;
  title: string;
  description: string;
  duration: string;
  icon: string;
  details: string[];
}

export interface Props {
  steps: Step[];
}

const { steps } = Astro.props;
---

<style>
  .timeline-step {
    transition:
      opacity 0.8s ease-out,
      transform 0.8s ease-out;
  }
  .timeline-step.animate-in {
    opacity: 1 !important;
    transform: translateX(0) !important;
  }
</style>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 text-center mb-12">
    Your Evaluation Journey
  </h2>

  <div class="relative">
    {/* Timeline line */}
    <div
      class="hidden md:block absolute left-1/2 transform -translate-x-1/2 w-1 bg-gradient-to-b from-purple-400 to-purple-600 h-full rounded-full"
    >
    </div>

    <div class="space-y-8 md:space-y-12">
      {
        steps.map((step, index) => (
          <div
            class={`timeline-step relative flex items-center ${index % 2 === 0 ? "md:flex-row step-left" : "md:flex-row-reverse step-right"}`}
            style={`opacity: 0; transform: translateX(${index % 2 === 0 ? "-100px" : "100px"});`}
          >
            {/* Timeline dot */}
            <div class="hidden md:flex absolute left-1/2 transform -translate-x-1/2 w-6 h-6 bg-gradient-to-br from-purple-500 to-purple-600 rounded-full border-4 border-white shadow-lg z-10 flex items-center justify-center">
              <span class="text-white font-bold text-sm">{step.number}</span>
            </div>

            {/* Content */}
            <div
              class={`w-full md:w-1/2 ${index % 2 === 0 ? "md:pr-16" : "md:pl-16"}`}
            >
              <div class="bg-white rounded-xl shadow-lg p-8 border border-gray-100 hover:shadow-xl transition-all duration-300 hover:scale-105">
                <div class="flex items-center gap-4 mb-6">
                  <div class="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-full flex items-center justify-center text-white text-2xl font-bold shadow-lg flex-shrink-0">
                    {step.number}
                  </div>
                  <div>
                    <h3 class="text-2xl font-bold text-gray-900">
                      {step.title}
                    </h3>
                    <p class="text-purple-600 font-semibold text-lg">
                      {step.duration}
                    </p>
                  </div>
                </div>

                <p class="text-gray-700 mb-6 leading-relaxed text-lg">
                  {step.description}
                </p>

                <div class="space-y-3">
                  {step.details.map((detail) => (
                    <div class="flex items-start gap-3 p-3 bg-purple-50 rounded-lg">
                      <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0" />
                      <p class="text-gray-700">{detail}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const steps = document.querySelectorAll(".timeline-step");

    const animateStep = (element) => {
      element.classList.add("animate-in");
    };

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            animateStep(entry.target);
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.1,
      }
    );

    steps.forEach((step) => {
      // Check if step is already in view
      const rect = step.getBoundingClientRect();
      const isInView = rect.top < window.innerHeight && rect.bottom > 0;

      if (isInView) {
        // Animate immediately if already in view
        setTimeout(() => animateStep(step), 100); // Small delay to ensure DOM is ready
      } else {
        // Otherwise, observe for intersection
        observer.observe(step);
      }
    });
  });
</script>
